// Test login functionality for m_lowegren@mac.com
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials');
  console.log('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testLogin() {
  const email = 'm_lowegren@mac.com';
  const password = 'coach2024';

  console.log('\nüß™ Testing Login for:', email);
  console.log('‚îÅ'.repeat(60));

  try {
    // Step 1: Check if user exists in auth.users
    console.log('\n1Ô∏è‚É£  Checking auth.users...');
    const { data: { users }, error: listError } = await supabase.auth.admin.listUsers();
    
    if (listError) {
      console.log('‚ö†Ô∏è  Could not list users (using anon key?)');
    } else {
      const authUser = users.find(u => u.email === email);
      if (authUser) {
        console.log('‚úÖ User exists in auth.users');
        console.log('   ID:', authUser.id);
        console.log('   Email:', authUser.email);
        console.log('   Created:', authUser.created_at);
      } else {
        console.log('‚ùå User NOT found in auth.users');
        console.log('   You need to create this user first!');
        return;
      }
    }

    // Step 2: Check profile
    console.log('\n2Ô∏è‚É£  Checking profiles table...');
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', email)
      .single();

    if (profileError) {
      console.log('‚ùå Profile error:', profileError.message);
    } else if (profile) {
      console.log('‚úÖ Profile exists');
      console.log('   Name:', profile.name);
      console.log('   Role:', profile.role);
      console.log('   Full Access:', profile.has_full_access);
    } else {
      console.log('‚ö†Ô∏è  Profile not found (will be created on first login)');
    }

    // Step 3: Attempt login
    console.log('\n3Ô∏è‚É£  Testing login with password...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (loginError) {
      console.log('‚ùå Login failed:', loginError.message);
      console.log('   Error code:', loginError.status);
      
      if (loginError.message.includes('Invalid login credentials')) {
        console.log('\nüí° Solution: Reset the password in Supabase Dashboard:');
        console.log('   1. Go to Authentication ‚Üí Users');
        console.log('   2. Find', email);
        console.log('   3. Click "..." ‚Üí Reset Password');
        console.log('   4. Set password to: coach2024');
      }
    } else {
      console.log('‚úÖ Login successful!');
      console.log('   User ID:', loginData.user.id);
      console.log('   Email:', loginData.user.email);
      console.log('   Session:', loginData.session ? '‚úÖ Active' : '‚ùå None');
      
      // Sign out
      await supabase.auth.signOut();
      console.log('   Signed out');
    }

    // Step 4: Check client record (if applicable)
    console.log('\n4Ô∏è‚É£  Checking clients table...');
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('*')
      .eq('email', email)
      .single();

    if (clientError && clientError.code !== 'PGRST116') {
      console.log('‚ö†Ô∏è  Client query error:', clientError.message);
    } else if (client) {
      console.log('‚úÖ Client record exists');
      console.log('   Name:', client.name);
      console.log('   Package:', client.package_id);
    } else {
      console.log('‚ÑπÔ∏è  No client record (admin users may not have one)');
    }

  } catch (error) {
    console.error('\n‚ùå Unexpected error:', error);
  }

  console.log('\n' + '‚îÅ'.repeat(60));
  console.log('\nüìã Test Summary:');
  console.log('   Email:', email);
  console.log('   Password:', password);
  console.log('   Login URL: http://localhost:3000/login');
  console.log('\n');
}

// Run the test
testLogin();

